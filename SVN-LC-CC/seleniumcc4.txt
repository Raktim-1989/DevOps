import static org.junit.Assert.assertEquals;

import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.Select;
import org.testng.TestNG;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;
import org.testng.collections.Lists;
import junit.framework.Assert;

@Listeners(FeatureTest.class)            //DO NOT remove or alter this line. REQUIRED FOR TESTING
public class CustomerRegistration {      //DO NOT Change the class Name

    //Use the below declarations
	static WebDriver driver;
	static String[][] excelData = null;
	
	@BeforeSuite
	public void createDriver(){  //DO NOT change the method signature
	    //Annotate this with BeforeSuite
	    //Create driver and assign it to 'static' driver variable
		driver = DriverSetup.getWebDriver();
		
	}
	@DataProvider(name = "Customers")
	public Object[][] usersData() throws Exception{          //DO NOT change the method signature
	    //Annotate this method with data provider name as "Customers".
	    //Parse data from Customers.xlsx, store in excelData variable and return the 2-dimensional array
		String directory = System.getProperty("user.dir");
	    String path = directory + File.separator + "Customers.xlsx";
	    FileInputStream fis = new FileInputStream(path);
	    XSSFWorkbook wb = new XSSFWorkbook(fis);
	    XSSFSheet sh = wb.getSheet("Customers");
	    excelData = new String[2][4];
	    for(int i = 0; i<1; i++)
	    {
	    	XSSFRow row = sh.getRow(i);
	    	for(int j = 0; j<4; j++)
	    	{
	    		XSSFCell cell = row.getCell(j);
	    		DataFormatter df = new DataFormatter();
	    		excelData[i][j] = df.formatCellValue(cell);
	    		 		System.out.println(excelData[i][j]);
	    		    		
	    	}    	
	    }
	   //System.out.println(excelData); 
	    return excelData;
	}		
	@Test(dataProvider = "Customers", priority = 0)
	void testUser (String Uname, String Uphoneno, String Udob, String gender, String Uaddr){   //DO NOT change the method signature
		//Annotate this method with data provider name as "Customers". Add 'priority=0'
		//Fill the form using data parsed from excel and submit
		driver.findElement(By.id("name")).clear();
		driver.findElement(By.id("name")).sendKeys(Uname);
		driver.findElement(By.id("mobile")).clear();
		driver.findElement(By.id("mobile")).sendKeys(Uphoneno);
		driver.findElement(By.id("dob")).clear();
		driver.findElement(By.id("dob")).sendKeys(Udob);
		driver.findElement(By.id("male")).click();
		driver.findElement(By.id("address")).clear();
		driver.findElement(By.id("address")).sendKeys(Uaddr);
		driver.findElement(By.id("register")).click();
		
	}
	
    @Test(testName="testName",priority=1)
	void testName (){   //DO NOT change the method signature
    	String username = driver.findElement(By.xpath("//table/tbody/tr[1]/td[2]")).getText();
        System.out.println(username);
    	Assert.assertEquals(username,excelData[0][0], "Name doesnt match");
        // Locate the name in "Registered Successfully page". Assert it against the excel data.Set 'Name doesnt match 'custom failure message in assert 
    }
	@Test(testName="testPhone",priority=2)
	void testPhone(){     //DO NOT change the method signature
		String phonenumber = driver.findElement(By.xpath("//table/tbody/tr[2]/td[2]")).getText();   
	    Assert.assertEquals(phonenumber, excelData[0][1], "Name doesnt match");   
		// Locate the phone in "Registered Successfully page". Assert it against the excel data.Set 'Name doesnt match 'custom failure message in assert 
    }
	@Test(testName="testDOB",priority=3)
	void testDOB (){ //DO NOT change the method signature
		String dateofbirth = driver.findElement(By.xpath("//table/tbody/tr[3]/td[2]")).getText();   
	    Assert.assertEquals(dateofbirth, excelData[0][2], "Name doesnt match");       
		// Locate the date of birth in "Registered Successfully page". Assert it against the excel data.Set 'Name doesnt match 'custom failure message in assert 
    }
	@Test(testName="testGender",priority=4)
	void testGender(){  //DO NOT change the method signature
		String sgender = driver.findElement(By.xpath("//table/tbody/tr[4]/td[2]")).getText();   
	    Assert.assertEquals(sgender, excelData[0][3], "Name doesnt match");         
		// Locate the gender in "Registered Successfully page". Assert it against the excel data.Set 'Name doesnt match 'custom failure message in assert 
    }
	
	public void checkUser() {   //DO NOT change the method signature
	    //Invoke the test using TestNG ONLY HERE.
		TestNG testng = new TestNG();
		testng.setTestClasses(new Class[] {CustomerRegistration.class} );
		testng.run();
	}
	
	public static void main(String[] args) throws Exception {
	    CustomerRegistration CR = new CustomerRegistration();
	    CR.checkUser();
	    
	    //Implement code here	
	}
}